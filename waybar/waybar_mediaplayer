#! /bin/python3

import json
import subprocess
import os

if os.path.exists("./colors-waybar.css"):
    with open("./colors-waybar.css", mode="r", encoding="utf-8") as f:
        lines = f.readlines()
        FOREGROUND = lines[0][25:32]
        COMPLETED_COLOR = lines[10][21:28]

def get_first_artist(artists : str):
    return artists.split(",")[0]

def truncate_text(text : str, max_length : int):
    if len(text) > max_length:
        toreturn = text[0:max_length-3] + "..."
    else:
        toreturn = text
    return toreturn 

def main():
    players = subprocess.check_output(["playerctl", "--list-all"], text=True).strip().split()
    player = players[0] if len(players) >= 1 else None
    if not player or player == [""]:
        return {"text": "No music playing", "class": "media"}
    
    status = subprocess.check_output(["playerctl", "--player="+player, "status"], text=True).strip()
    if status == "Stopped":
        return {"text": "No music playing", "class": "media"}

    artist = subprocess.check_output(["playerctl", "--player="+player, "metadata", "artist"], text=True).strip()
    artist = truncate_text( get_first_artist(artist), 18 )
    title = subprocess.check_output(["playerctl", "--player="+player, "metadata", "title"], text=True).strip()
    title = truncate_text(title,28)

    try:
        position = int(float(subprocess.check_output(["playerctl", "--player="+player, "position"], text=True).strip()))
        length_mcs = int(subprocess.check_output(["playerctl", "--player="+player, "metadata", "mpris:length"], text=True).strip())
        length = length_mcs // 1000000 if length_mcs else 0
    except Exception as e:
        position = 0
        length = 0
    
    playing_icon = "" if status == "Paused" else ""

    if length > 0:
        progress= position / length
        bar_length = 12
        filled = int(progress * bar_length)
        time_info = f"{position//60:02d}:{position%60:02d}"

        completed = "/"
        completed_part = f'<span foreground="{COMPLETED_COLOR}">{completed * filled}</span>'
        
        uncompleted = "-"
        uncompleted_part = f'<span foreground="{FOREGROUND}">{uncompleted * (bar_length-filled)}</span>'
        
        progress_bar = completed_part + uncompleted_part

        text = f"{playing_icon} {artist} - {title} [{progress_bar}] {time_info}"
        text = text + " " * (140-len(text))
    else:
        text = f"{playing_icon} {artist} - {title}"
    
    return {"text": text, "class": "media"}

if __name__ == "__main__":
    try:
        info = main()
        print(json.dumps(info))
    except Exception:
        print(json.dumps({"text": "  No music playing", "class": "media"}))
